rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
))
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) -> results
rm(results)
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) -> results
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
))
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% as.data.frame
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% as.data.frame -> results
View(results)
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% t %>% as.data.frame -> results
## Iteration for mortality
models = list()
# LOOP
for (v in colnames(mtable)[-c(1:9)]) {
models[[v]] <- lm(mtable[,"diff_incidence"] ~ mtable[,v])
}
models[[v]] <- lm(mtable[,"diff_mortality"] ~ mtable[,v])
## get r-sq , p-val and beta
summary(models[[1]])
coef(models[[1]])[2] ## beta
summary(models[[1]])$adj.r.squared ## r.square
summary(models[[1]])$coefficients[2,4] ## p-val
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% t %>% as.data.frame -> results
View(results)
## Iteration for Incidence
models = list()
# LOOP
for (v in colnames(mtable)[-c(1:9)]) {
models[[v]] <- lm(mtable[,"diff_incidence"] ~ mtable[,v])
}
## get r-sq , p-val and beta
summary(models[[1]])
coef(models[[1]])[2] ## beta
summary(models[[1]])$adj.r.squared ## r.square
summary(models[[1]])$coefficients[2,4] ## p-val
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% t %>% as.data.frame -> results_inc
## Iteration for mortality
models = list()
# LOOP
for (v in colnames(mtable)[-c(1:9)]) {
models[[v]] <- lm(mtable[,"diff_mortality"] ~ mtable[,v])
}
## get r-sq , p-val and beta
summary(models[[1]])
coef(models[[1]])[2] ## beta
summary(models[[1]])$adj.r.squared ## r.square
summary(models[[1]])$coefficients[2,4] ## p-val
sapply(models, function(x) data.frame(
#name = names(x),
beta = unname(coef(x)[2]),
rsq = unname(summary(x)$adj.r.squared),
pval = unname(summary(x)$coefficients[2,4])
)) %>% t %>% as.data.frame -> results_mort
View(results_inc)
View(results_mort)
write.csv(results_inc, "univariate_model_incidence")
View(results_inc)
write.csv(results_inc, "univariate_model_incidence.csv")
write.csv(results_inc, "univariate_model_incidence.csv")
as.data.frame(results_inc)
as.data.frame(results_inc) -> results_inc
do.call(rbind.data.frame, results_mort)
do.call(rbind.data.frame, t(results_mort))
do.call(rbind.data.frame, results_mort) -> results_mort
View(results_mort)
View(results_inc)
write.csv(results_mort, "univariate_model_mortality.csv")
do.call(rbind.data.frame, results_inc) -> results_inc
write.csv(results_mort, "univariate_model_incidence.csv")
fit <- lm(mtable$diff_incidence ~ mtable$unemployment_2020)
summary(fit)
# load libraries
library(tidyverse)
library(ggplot2)
#Load master table
mtable <- read.csv("Master_Table.csv")
#normalize fully vacc by population
mtable$nfullyvacc <- mtable$fullyvacc/mtable$population
#fit multiple linear regression
fit <- lm(mtable$diff_incidence ~ mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit)
fit <- lm(mtable$diff_mortality ~ mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit)
#fit multiple linear regression
fit <- lm(mtable$diff_incidence ~  mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit)
#fit multiple linear regression
fit <- lm(mtable$diff_incidence ~  mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit)
#fit multiple linear regression
fit <- lm(mtable$diff_incidence ~  mtable$hi_edu
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit)
#fit multiple linear regression
fit <- lm(mtable$diff_incidence ~  mtable$hhold_income)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$hhold_income +mtable$fullyvacc)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$hhold_income + mtable$fullyvacc)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$fullyvacc + mtable$hhold_income )
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$fullyvacc + mtable$hhold_income + mtable$diff_ntest)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$fullyvacc + mtable$hhold_income + mtable$diff_ntest + mtable$unemployment_2020)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hhold_income +
mtable$diff_ntest + mtable$unemployment_2020)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hhold_income)
summary(fit)
fit2 <- lm(mtable$fullyvacc ~ mtable$hhold_income)
summary(fit2)
fit2 <- lm(mtable$nfullyvacc ~ mtable$hhold_income)
summary(fit2)
plot(mtable$hhold_income , mtable$nfullyvacc)
abline(fit2)
#fit multiple linear regression
fit1 <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
summary(fit1)
#fit multiple linear regression
fit1 <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit1)
#fit multiple linear regression
fit1 <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit1)
#fit multiple linear regression
fit2 <- lm(mtable$diff_mortality ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
mtable$case_fa <- mtable$diff_mortality/mtable$diff_cases
View(mtable)
fit2 <- lm(mtable$case_fa ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
mtable$case_fa <- mtable$diff_mortality/mtable$diff_cases
fit2 <- lm(mtable$case_fa ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
mtable$case_fa <- mtable$diff_deaths/mtable$diff_cases
fit2 <- lm(mtable$case_fa ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
#fit multiple linear regression mortality
fit2 <- lm(mtable$diff_mortality ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
#fit multiple linear regression incidence
fit1 <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit1)
#fit multiple linear regression mortality
fit2 <- lm(mtable$diff_mortality ~  mtable$nfullyvacc + mtable$hi_edu + mtable$poverty_17
+ mtable$poverty_all + mtable$RUC_Code + mtable$hhold_income + mtable$perc_income
+ mtable$unemployment_2020 +mtable$diff_ntest)
summary(fit2)
summary(fit2)
summary(fit1)
summary(fit2)
fit <- lm(mtable$diff_incidence ~  mtable$hhold_income)
summary(fit)
fit <- lm(mtable$diff_incidence ~  mtable$nfullyvacc + mtable$hhold_income)
summary(fit)
#hh income is a confounder
fit2 <- lm(mtable$nfullyvacc ~ mtable$hhold_income)
summary(fit2)
plot(mtable$hhold_income , mtable$nfullyvacc)
abline(fit2)
#hh income is a confounder
fit2 <- lm(mtable$nfullyvacc ~ mtable$hhold_income)
summary(fit2)
fit <- lm(mtable$diff_mortality ~ mtable$nfullyvacc*mtable$hhold_income)
summary(fit)
fit <- lm(mtable$diff_mortality ~ mtable$nfullyvacc*mtable$RUC_Code)
summary(fit)
fit <- lm(mtable$diff_mortality ~ mtable$nfullyvacc*mtable$diff_ntest)
summary(fit)
library(tidyverse)
table <- read.csv("5Dec_merged_dataset_all_years.csv")
table %>% filter(state_name == "California", year == "2015") -> metadata_2015
write.csv(metadata_2015, "metadata_CA_2015.csv")
View(metadata_2015)
View(table)
View(metadata_2015)
# load libraries
library(tidyverse)
library(ggplot2)
library(zoo)
# load data
covid <- read.csv("deaths.csv")
ses   <- read.csv("county household income.csv", header = TRUE, sep = ";")
## new columns
ses$hhicm <- ses$Textbox20 %>% gsub(pattern = "\\$", replacement = "")
ses$county <- ses$name %>% gsub(pattern = " County, CA", replacement = "") %>%
gsub(pattern = " County/city, CA", replacement = "")
## merge data
covid <- merge(covid, ses[,c("county", "hhicm")], by.x = "area", by.y = "county")
## pre-process
covid$hhicm <- gsub(pattern = ",", replacement = "", covid$hhicm)
covid$hhicm <- as.numeric(covid$hhicm)
## deaths per day
covid %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = reorder(area, hhicm),
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5")
## cases per day
covid %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = reorder(area, hhicm),
fill = cut(cases/(population/100000),
c(-Inf, 0,
10,
20,
30,
40,
50,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "cases per 10^5")
### per month
### plot modified table
covid %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.yearmon(as.Date(date)),
y = reorder(area, hhicm),
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile(colour="white",size=0.5) +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5")
### table hhicm
ses[,c("county", "hhicm")]
## deaths per day
covid %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = reorder(area, hhicm),
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5")
# load data
deaths <- read.csv("deaths.csv")
# load libraries
library(tidyverse)
library(ggplot2)
library(zoo)   ### as.yearmon()
deaths$area %>% table %>% dim
deaths$deaths %>% hist(breaks = 100)
deaths %>% filter(area == "San Diego") %>% select(deaths)%>% as.numeric() #%>% hist(breaks = 100)
deaths[deaths$area == "San Diego",]$deaths %>% hist()
### grafico de barra
deaths %>% filter(area == "San Diego") %>%
ggplot() +
aes(x = as.Date(date), y = deaths) + geom_col() + theme_classic()
## grafico de linea
deaths %>% filter(area == "San Diego") %>%
ggplot() +
aes(x = as.Date(date), y = deaths, group = 1) + geom_line() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") + theme_classic()
## grafico de linea para todos los counties
deaths %>% filter(area != "California") %>%
ggplot() +
aes(x = as.Date(date), y = deaths, group = area) + geom_line(aes(color = area)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b") + theme_classic()
## Tiles per day Cases/Population log2
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
ggplot() +
aes(x = as.Date(date), y = area, fill = log2((cases+1)/population) ) + geom_tile() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_fill_distiller(palette = "Spectral") +
theme_classic()
## Tiles per day Deaths/Population log2
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
ggplot() +
aes(x = as.Date(date), y = area, fill = deaths/(population/10000)) + geom_tile() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_fill_distiller(palette = "Spectral") +
theme_classic()
## Bin months
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
ggplot() +
aes(x = as.yearmon(as.Date(date)),
y = area,
#fill = deaths) +
fill = deaths/(population/100000)) +
geom_tile() +
#scale_x_yearmon() +
#scale_x_continuous(breaks=as.numeric(as.Date(deaths$date)), labels=format(as.Date(deaths$date),"%m")) +
#scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_fill_distiller(palette = "Spectral") +
theme_classic()
### bin colors
## Bin months with NAs
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.yearmon(as.Date(date)),
y = area,
#fill = deaths) +
fill = cut(deaths/(population/100000), c(0,0.5,1,1.5,2,2.5,Inf))
) +
geom_tile() +
#scale_x_yearmon() +
#scale_x_continuous(breaks=as.numeric(as.Date(deaths$date)), labels=format(as.Date(deaths$date),"%m")) +
#scale_x_date(date_breaks = "1 month", date_labels = "%b") +
scale_fill_viridis_d() +
theme_classic()
### plot modified table
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.yearmon(as.Date(date)),
y = area,
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile(colour="white",size=0.5) +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5")
## per day
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = area,
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5")
## plot per day
perday_plot <- function(df){
df %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = area,
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = paste("deaths per 10^5")) -> p
p
}
## plotpermonth
permon_plot <- function(df){
df %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.yearmon(as.Date(date)),
y = area,
fill = cut(deaths/(population/100000),
c(-Inf, 0,
0.5,
1,
1.5,
2.0,
2.5,
Inf),
include.lowest = TRUE)
) +
geom_tile(colour="white",size=0.5) +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "deaths per 10^5") -> p
p
}
perday_plot(deaths) ### need to relativize Z
permon_plot(deaths)
perday_plot(deaths) ### need to relativize Z
permon_plot(deaths)
#### cases
## per day
deaths %>% filter(area != "California" & area != "Out of state" & area != "Unknown") %>%
na.omit() %>%
ggplot() +
aes(x = as.Date(date),
y = area,
fill = cut(cases/(population/100000),
c(-Inf, 0,
10,
20,
30,
40,
50,
Inf),
include.lowest = TRUE)
) +
geom_tile() +
scale_fill_brewer(palette = "YlOrRd") +
theme_classic() + labs( fill = "cases per 10^5")
